{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"","title":"Home"},{"location":"APIReference/NCAxisHelper.html","text":"NC Helper Functions This API Doc is to serve as a reference for the NC Helper function blocks that are included with the XBoxControllerUtilities PLC library. Please visit the Getting Started section for the installation of the PLC library. CAUTION! The blocks below use Move Velocity commands under the hood, use at your own risk . Internally, they will copy the original Feedrate Override value of the Axis, and then supply a new one based on the Options Structure provided. Once the bEnable bit turns False, the original Feedrate Override value is copied back into the Axis and it is then halted. The feedrate copy feature is done to allow a smooth ramping based on the force applied to each joystick or trigger. Button Based Helpers The button based helpers can work in two ways; a simple instant jog button, or a rampable jog button. When enabling the ramp feature inside the ST_XBox_Button_NC_Options struct, the axis will ramp to a specified value based on how long the button is pressed. FB_XBox_Dual_Button_NC The dual button block uses two buttons to jog the axis backward and forward. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 VAR // FB_XBox_Dual_Button_NC Instance fbXBox_Dual_Button_NC : FB_XBox_Dual_Button_NC ; // XBox Controller Instance XBoxController : FB_XBox_Controller ( NetID := '' , iControllerNumber := 1 ); // Enable for the Jog command bEnable : BOOL ; // Axis Reference to NC Axis_1 : Axis_Ref ; // Options for the Jog command stOptions : ST_XBox_Button_NC_Options ; END_VAR 1 2 3 4 5 6 7 8 9 // Update IO XBoxController . Cycle (); // Using FB_XBox_Dual_Button_NC to control an NC Axis fbXBox_Dual_Button_NC . Jog ( bEnable := bEnable AND XBoxController . P_Status . bConnected , bForward_Button := XBoxController . P_Buttons . X , bBackward_Button := XBoxController . P_Buttons . Y , Axis := Axis_1 , stOptions := stOptions ); Parameter Type Description bEnable BOOL Enable the jog command. It will halt the axis on falling edge. bForward_Button BOOL Command value to jog the axis forward bBackward_Button BOOL Command value to jog the axis backward Axis REFERENCE TO Axis_Ref Axis_Ref for the NC Axis to Jog stOptions ST_XBox_Button_NC_Options Options structure for ramping features and inverting the direction of jogging FB_XBox_Single_Button_NC The single button block uses only one buttons to jog the axis in a specific direction. The direction of jog is based on the stOptions struct settings and the invert direction bit. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 VAR // FB_XBox_Single_Button_NC Instance fbXBox_Single_Button_NC : FB_XBox_Single_Button_NC ; // XBox Controller Instance XBoxController : FB_XBox_Controller ( NetID := '' , iControllerNumber := 1 ); // Enable for the Jog command bEnable : BOOL ; // Axis Reference to NC Axis_1 : Axis_Ref ; // Options for the Jog command stOptions : ST_XBox_Button_NC_Options ; END_VAR 1 2 3 4 5 6 7 8 // Update IO XBoxController . Cycle (); // Using FB_XBox_Single_Button_NC to control an NC Axis fbXBox_Single_Button_NC . Jog ( bEnable := bEnable AND XBoxController . P_Status . bConnected , bButton := XBoxController . P_Buttons . X , Axis := Axis_1 , stOptions := stOptions ); Parameter Type Description bEnable BOOL Enable the jog command. It will halt the axis on falling edge. bButton BOOL Command value to jog the axis (direction is based on the stOptions) Axis REFERENCE TO Axis_Ref Axis_Ref for the NC Axis to Jog stOptions ST_XBox_Button_NC_Options Options structure for ramping features and inverting the direction of jogging Joystick Based Helpers FB_XBox_Dual_Directional_Joystick_NC The dual directional joystick block uses both the X and Y value of the controller to drive two different axis. This is extremely helpful when working with a cartesian robot using XY coordinates. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 VAR // FB_XBox_Dual_Directional_Joystick_NC Instance fbXBox_Dual_Directional_Joystick_NC : FB_XBox_Dual_Directional_Joystick_NC ; // XBox Controller Instance XBoxController : FB_XBox_Controller ( NetID := '' , iControllerNumber := 1 ); // Enable for the Jog command bEnable : BOOL ; // Axis Reference to NC X_Axis : Axis_Ref ; Y_Axis : Axis_Ref ; // Options for the Jog command stOptions : ST_XBox_Dual_Directional_Joystick_NC_Options ; END_VAR 1 2 3 4 5 6 7 8 9 // Update IO XBoxController . Cycle (); // Using FB_XBox_Dual_Directional_Joystick_NC to control an NC Axis fbXBox_Dual_Directional_Joystick_NC . Jog ( bEnable := bEnable AND XBoxController . P_Status . bConnected , stJoystick := XBoxController . P_Left_Joystick , X_Axis := X_Axis , Y_Axis := Y_Axis , stOptions := stOptions ); Parameter Type Description bEnable BOOL Enable the jog command. It will halt the axis on falling edge. stJoystick REFERENCE TO ST_XBox_Controller_Joystick Joystick from the controller X_Axis REFERENCE TO Axis_Ref Axis to follow the X direction of the Joystick Y_Axis REFERENCE TO Axis_Ref Axis to follow the Y direction of the Joystick stOptions ST_XBox_Dual_Directional_Joystick_NC_Options Options structure FB_XBox_Single_Directional_Joystick_NC The single directional joystick block uses only one joystick value of the controller to drive a single axis. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 VAR // FB_XBox_Single_Directional_Joystick_NC Instance fbXBox_Single_Directional_Joystick_NC : FB_XBox_Single_Directional_Joystick_NC ; // XBox Controller Instance XBoxController : FB_XBox_Controller ( NetID := '' , iControllerNumber := 1 ); // Enable for the Jog command bEnable : BOOL ; // Axis Reference to NC Axis_1 : Axis_Ref ; // Options for the Jog command stOptions : ST_XBox_Single_Directional_Joystick_NC_Options ; END_VAR 1 2 3 4 5 6 7 8 // Update IO XBoxController . Cycle (); // Using FB_XBox_Single_Directional_Joystick_NC to control an NC Axis fbXBox_Single_Directional_Joystick_NC . Jog ( bEnable := bEnable AND XBoxController . P_Status . bConnected , stJoystick := XBoxController . P_Left_Joystick . fX , Axis := Axis_1 , stOptions := stOptions ); Parameter Type Description bEnable BOOL Enable the jog command. It will halt the axis on falling edge. fJoystick LREAL Joystick value from the controller Axis REFERENCE TO Axis_Ref Axis to follow the direction of the Joystick stOptions ST_XBox_Single_Directional_Joystick_NC_Options Options structure Trigger Based Helpers FB_XBox_Dual_Trigger_NC The dual trigger joystick block uses both left and right triggers of the controller to drive a single axis. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 VAR // FB_XBox_Dual_Trigger_NC Instance fbXBox_Dual_Trigger_NC : FB_XBox_Dual_Trigger_NC ; // XBox Controller Instance XBoxController : FB_XBox_Controller ( NetID := '' , iControllerNumber := 1 ); // Enable for the Jog command bEnable : BOOL ; // Axis Reference to NC Axis_1 : Axis_Ref ; // Options for the Jog command stOptions : ST_XBox_Trigger_NC_Options ; END_VAR 1 2 3 4 5 6 7 8 9 // Update IO XBoxController . Cycle (); // Using FB_XBox_Dual_Trigger_NC to control an NC Axis fbXBox_Dual_Trigger_NC . Jog ( bEnable := bEnable AND XBoxController . P_Status . bConnected , fLeft_Trigger := XBoxController . P_Left_Trigger , fRight_Trigger := XBoxController . P_Right_Trigger , Axis := Axis_1 , stOptions := stOptions ); Parameter Type Description bEnable BOOL Enable the jog command. It will halt the axis on falling edge. fLeft_Trigger LREAL Left trigger value from the controller fRight_Trigger LREAL Right trigger value from the controller Axis REFERENCE TO Axis_Ref Axis to follow the trigger commands stOptions ST_XBox_Trigger_NC_Options Options structure FB_XBox_Single_Trigger_NC The single trigger joystick block uses only one of the controller triggers to drive a single axis. The direction of jog is based on the stOptions struct settings and the invert direction bit. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 VAR // FB_XBox_Single_Trigger_NC Instance fbXBox_Single_Trigger_NC : FB_XBox_Single_Trigger_NC ; // XBox Controller Instance XBoxController : FB_XBox_Controller ( NetID := '' , iControllerNumber := 1 ); // Enable for the Jog command bEnable : BOOL ; // Axis Reference to NC Axis_1 : Axis_Ref ; // Options for the Jog command stOptions : ST_XBox_Trigger_NC_Options ; END_VAR 1 2 3 4 5 6 7 8 // Update IO XBoxController . Cycle (); // Using FB_XBox_Single_Trigger_NC to control an NC Axis fbXBox_Single_Trigger_NC . Jog ( bEnable := bEnable AND XBoxController . P_Status . bConnected , fTrigger := XBoxController . P_Left_Trigger , Axis := Axis_1 , stOptions := stOptions ); Parameter Type Description bEnable BOOL Enable the jog command. It will halt the axis on falling edge. fTrigger LREAL Trigger value from the controller Axis REFERENCE TO Axis_Ref Axis to follow the trigger commands stOptions ST_XBox_Trigger_NC_Options Options structure DUTs ST_XBox_Button_NC_Options Name Type Default Value Description bInverted BOOL FALSE Inverts the direction of the axis fMaxOverride LREAL 100.0 Maximum Feedrate bRampedOverride BOOL TRUE Ramped Feedrate - Increase the feedrate over time of button pressed tRampStepTime TIME T#100MS Ramp Step - How often to increase override as button is pressed iRampStepFactor INT 5 Ramp Step Factor - The % override to step at each time period stXBox_NC_Halt_Dynamics ST_XBox_NC_Halt_Dynamics Struct of parameters for MC_Halt command ST_XBox_Dual_Directional_Joystick_NC_Options Name Type Default Value Description bInverted_X BOOL FALSE Inverts the direction of the X axis bInverted_Y BOOL FALSE Inverts the direction of the Y axis fMaxOverride_X LREAL 100.0 Maximum Feedrate X Axis fMaxOverride_Y LREAL 100.0 Maximum Feedrate Y Axis stXBox_NC_Halt_Dynamics ST_XBox_NC_Halt_Dynamics Struct of parameters for MC_Halt command ST_XBox_Single_Directional_Joystick_NC_Options Name Type Default Value Description bInverted BOOL FALSE Inverts the direction of the axis fMaxOverride LREAL 100.0 Maximum Feedrate stXBox_NC_Halt_Dynamics ST_XBox_NC_Halt_Dynamics Struct of parameters for MC_Halt command ST_XBox_Trigger_NC_Options Name Type Default Value Description bInverted BOOL FALSE Inverts the direction of the axis fMaxOverride LREAL 100.0 Maximum Feedrate stXBox_NC_Halt_Dynamics ST_XBox_NC_Halt_Dynamics Struct of parameters for MC_Halt command ST_XBox_NC_Halt_Dynamics Name Type Default Value Description Deceleration LREAL 5000 Deceleration of the MC_Halt command Jerk LREAL 10000 Jerk of the MC_Halt command BufferMode MC_BufferMode BufferMode of the MC_Halt command Options ST_MoveOptions Options oif the MC_Halt command","title":"NC Axis Helpers"},{"location":"APIReference/NCAxisHelper.html#nc-helper-functions","text":"This API Doc is to serve as a reference for the NC Helper function blocks that are included with the XBoxControllerUtilities PLC library. Please visit the Getting Started section for the installation of the PLC library.","title":"NC Helper Functions"},{"location":"APIReference/NCAxisHelper.html#caution","text":"The blocks below use Move Velocity commands under the hood, use at your own risk . Internally, they will copy the original Feedrate Override value of the Axis, and then supply a new one based on the Options Structure provided. Once the bEnable bit turns False, the original Feedrate Override value is copied back into the Axis and it is then halted. The feedrate copy feature is done to allow a smooth ramping based on the force applied to each joystick or trigger.","title":"CAUTION!"},{"location":"APIReference/NCAxisHelper.html#button-based-helpers","text":"The button based helpers can work in two ways; a simple instant jog button, or a rampable jog button. When enabling the ramp feature inside the ST_XBox_Button_NC_Options struct, the axis will ramp to a specified value based on how long the button is pressed.","title":"Button Based Helpers"},{"location":"APIReference/NCAxisHelper.html#fb_xbox_dual_button_nc","text":"The dual button block uses two buttons to jog the axis backward and forward. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 VAR // FB_XBox_Dual_Button_NC Instance fbXBox_Dual_Button_NC : FB_XBox_Dual_Button_NC ; // XBox Controller Instance XBoxController : FB_XBox_Controller ( NetID := '' , iControllerNumber := 1 ); // Enable for the Jog command bEnable : BOOL ; // Axis Reference to NC Axis_1 : Axis_Ref ; // Options for the Jog command stOptions : ST_XBox_Button_NC_Options ; END_VAR 1 2 3 4 5 6 7 8 9 // Update IO XBoxController . Cycle (); // Using FB_XBox_Dual_Button_NC to control an NC Axis fbXBox_Dual_Button_NC . Jog ( bEnable := bEnable AND XBoxController . P_Status . bConnected , bForward_Button := XBoxController . P_Buttons . X , bBackward_Button := XBoxController . P_Buttons . Y , Axis := Axis_1 , stOptions := stOptions ); Parameter Type Description bEnable BOOL Enable the jog command. It will halt the axis on falling edge. bForward_Button BOOL Command value to jog the axis forward bBackward_Button BOOL Command value to jog the axis backward Axis REFERENCE TO Axis_Ref Axis_Ref for the NC Axis to Jog stOptions ST_XBox_Button_NC_Options Options structure for ramping features and inverting the direction of jogging","title":"FB_XBox_Dual_Button_NC"},{"location":"APIReference/NCAxisHelper.html#fb_xbox_single_button_nc","text":"The single button block uses only one buttons to jog the axis in a specific direction. The direction of jog is based on the stOptions struct settings and the invert direction bit. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 VAR // FB_XBox_Single_Button_NC Instance fbXBox_Single_Button_NC : FB_XBox_Single_Button_NC ; // XBox Controller Instance XBoxController : FB_XBox_Controller ( NetID := '' , iControllerNumber := 1 ); // Enable for the Jog command bEnable : BOOL ; // Axis Reference to NC Axis_1 : Axis_Ref ; // Options for the Jog command stOptions : ST_XBox_Button_NC_Options ; END_VAR 1 2 3 4 5 6 7 8 // Update IO XBoxController . Cycle (); // Using FB_XBox_Single_Button_NC to control an NC Axis fbXBox_Single_Button_NC . Jog ( bEnable := bEnable AND XBoxController . P_Status . bConnected , bButton := XBoxController . P_Buttons . X , Axis := Axis_1 , stOptions := stOptions ); Parameter Type Description bEnable BOOL Enable the jog command. It will halt the axis on falling edge. bButton BOOL Command value to jog the axis (direction is based on the stOptions) Axis REFERENCE TO Axis_Ref Axis_Ref for the NC Axis to Jog stOptions ST_XBox_Button_NC_Options Options structure for ramping features and inverting the direction of jogging","title":"FB_XBox_Single_Button_NC"},{"location":"APIReference/NCAxisHelper.html#joystick-based-helpers","text":"","title":"Joystick Based Helpers"},{"location":"APIReference/NCAxisHelper.html#fb_xbox_dual_directional_joystick_nc","text":"The dual directional joystick block uses both the X and Y value of the controller to drive two different axis. This is extremely helpful when working with a cartesian robot using XY coordinates. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 VAR // FB_XBox_Dual_Directional_Joystick_NC Instance fbXBox_Dual_Directional_Joystick_NC : FB_XBox_Dual_Directional_Joystick_NC ; // XBox Controller Instance XBoxController : FB_XBox_Controller ( NetID := '' , iControllerNumber := 1 ); // Enable for the Jog command bEnable : BOOL ; // Axis Reference to NC X_Axis : Axis_Ref ; Y_Axis : Axis_Ref ; // Options for the Jog command stOptions : ST_XBox_Dual_Directional_Joystick_NC_Options ; END_VAR 1 2 3 4 5 6 7 8 9 // Update IO XBoxController . Cycle (); // Using FB_XBox_Dual_Directional_Joystick_NC to control an NC Axis fbXBox_Dual_Directional_Joystick_NC . Jog ( bEnable := bEnable AND XBoxController . P_Status . bConnected , stJoystick := XBoxController . P_Left_Joystick , X_Axis := X_Axis , Y_Axis := Y_Axis , stOptions := stOptions ); Parameter Type Description bEnable BOOL Enable the jog command. It will halt the axis on falling edge. stJoystick REFERENCE TO ST_XBox_Controller_Joystick Joystick from the controller X_Axis REFERENCE TO Axis_Ref Axis to follow the X direction of the Joystick Y_Axis REFERENCE TO Axis_Ref Axis to follow the Y direction of the Joystick stOptions ST_XBox_Dual_Directional_Joystick_NC_Options Options structure","title":"FB_XBox_Dual_Directional_Joystick_NC"},{"location":"APIReference/NCAxisHelper.html#fb_xbox_single_directional_joystick_nc","text":"The single directional joystick block uses only one joystick value of the controller to drive a single axis. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 VAR // FB_XBox_Single_Directional_Joystick_NC Instance fbXBox_Single_Directional_Joystick_NC : FB_XBox_Single_Directional_Joystick_NC ; // XBox Controller Instance XBoxController : FB_XBox_Controller ( NetID := '' , iControllerNumber := 1 ); // Enable for the Jog command bEnable : BOOL ; // Axis Reference to NC Axis_1 : Axis_Ref ; // Options for the Jog command stOptions : ST_XBox_Single_Directional_Joystick_NC_Options ; END_VAR 1 2 3 4 5 6 7 8 // Update IO XBoxController . Cycle (); // Using FB_XBox_Single_Directional_Joystick_NC to control an NC Axis fbXBox_Single_Directional_Joystick_NC . Jog ( bEnable := bEnable AND XBoxController . P_Status . bConnected , stJoystick := XBoxController . P_Left_Joystick . fX , Axis := Axis_1 , stOptions := stOptions ); Parameter Type Description bEnable BOOL Enable the jog command. It will halt the axis on falling edge. fJoystick LREAL Joystick value from the controller Axis REFERENCE TO Axis_Ref Axis to follow the direction of the Joystick stOptions ST_XBox_Single_Directional_Joystick_NC_Options Options structure","title":"FB_XBox_Single_Directional_Joystick_NC"},{"location":"APIReference/NCAxisHelper.html#trigger-based-helpers","text":"","title":"Trigger Based Helpers"},{"location":"APIReference/NCAxisHelper.html#fb_xbox_dual_trigger_nc","text":"The dual trigger joystick block uses both left and right triggers of the controller to drive a single axis. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 VAR // FB_XBox_Dual_Trigger_NC Instance fbXBox_Dual_Trigger_NC : FB_XBox_Dual_Trigger_NC ; // XBox Controller Instance XBoxController : FB_XBox_Controller ( NetID := '' , iControllerNumber := 1 ); // Enable for the Jog command bEnable : BOOL ; // Axis Reference to NC Axis_1 : Axis_Ref ; // Options for the Jog command stOptions : ST_XBox_Trigger_NC_Options ; END_VAR 1 2 3 4 5 6 7 8 9 // Update IO XBoxController . Cycle (); // Using FB_XBox_Dual_Trigger_NC to control an NC Axis fbXBox_Dual_Trigger_NC . Jog ( bEnable := bEnable AND XBoxController . P_Status . bConnected , fLeft_Trigger := XBoxController . P_Left_Trigger , fRight_Trigger := XBoxController . P_Right_Trigger , Axis := Axis_1 , stOptions := stOptions ); Parameter Type Description bEnable BOOL Enable the jog command. It will halt the axis on falling edge. fLeft_Trigger LREAL Left trigger value from the controller fRight_Trigger LREAL Right trigger value from the controller Axis REFERENCE TO Axis_Ref Axis to follow the trigger commands stOptions ST_XBox_Trigger_NC_Options Options structure","title":"FB_XBox_Dual_Trigger_NC"},{"location":"APIReference/NCAxisHelper.html#fb_xbox_single_trigger_nc","text":"The single trigger joystick block uses only one of the controller triggers to drive a single axis. The direction of jog is based on the stOptions struct settings and the invert direction bit. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 VAR // FB_XBox_Single_Trigger_NC Instance fbXBox_Single_Trigger_NC : FB_XBox_Single_Trigger_NC ; // XBox Controller Instance XBoxController : FB_XBox_Controller ( NetID := '' , iControllerNumber := 1 ); // Enable for the Jog command bEnable : BOOL ; // Axis Reference to NC Axis_1 : Axis_Ref ; // Options for the Jog command stOptions : ST_XBox_Trigger_NC_Options ; END_VAR 1 2 3 4 5 6 7 8 // Update IO XBoxController . Cycle (); // Using FB_XBox_Single_Trigger_NC to control an NC Axis fbXBox_Single_Trigger_NC . Jog ( bEnable := bEnable AND XBoxController . P_Status . bConnected , fTrigger := XBoxController . P_Left_Trigger , Axis := Axis_1 , stOptions := stOptions ); Parameter Type Description bEnable BOOL Enable the jog command. It will halt the axis on falling edge. fTrigger LREAL Trigger value from the controller Axis REFERENCE TO Axis_Ref Axis to follow the trigger commands stOptions ST_XBox_Trigger_NC_Options Options structure","title":"FB_XBox_Single_Trigger_NC"},{"location":"APIReference/NCAxisHelper.html#duts","text":"","title":"DUTs"},{"location":"APIReference/NCAxisHelper.html#st_xbox_button_nc_options","text":"Name Type Default Value Description bInverted BOOL FALSE Inverts the direction of the axis fMaxOverride LREAL 100.0 Maximum Feedrate bRampedOverride BOOL TRUE Ramped Feedrate - Increase the feedrate over time of button pressed tRampStepTime TIME T#100MS Ramp Step - How often to increase override as button is pressed iRampStepFactor INT 5 Ramp Step Factor - The % override to step at each time period stXBox_NC_Halt_Dynamics ST_XBox_NC_Halt_Dynamics Struct of parameters for MC_Halt command","title":"ST_XBox_Button_NC_Options"},{"location":"APIReference/NCAxisHelper.html#st_xbox_dual_directional_joystick_nc_options","text":"Name Type Default Value Description bInverted_X BOOL FALSE Inverts the direction of the X axis bInverted_Y BOOL FALSE Inverts the direction of the Y axis fMaxOverride_X LREAL 100.0 Maximum Feedrate X Axis fMaxOverride_Y LREAL 100.0 Maximum Feedrate Y Axis stXBox_NC_Halt_Dynamics ST_XBox_NC_Halt_Dynamics Struct of parameters for MC_Halt command","title":"ST_XBox_Dual_Directional_Joystick_NC_Options"},{"location":"APIReference/NCAxisHelper.html#st_xbox_single_directional_joystick_nc_options","text":"Name Type Default Value Description bInverted BOOL FALSE Inverts the direction of the axis fMaxOverride LREAL 100.0 Maximum Feedrate stXBox_NC_Halt_Dynamics ST_XBox_NC_Halt_Dynamics Struct of parameters for MC_Halt command","title":"ST_XBox_Single_Directional_Joystick_NC_Options"},{"location":"APIReference/NCAxisHelper.html#st_xbox_trigger_nc_options","text":"Name Type Default Value Description bInverted BOOL FALSE Inverts the direction of the axis fMaxOverride LREAL 100.0 Maximum Feedrate stXBox_NC_Halt_Dynamics ST_XBox_NC_Halt_Dynamics Struct of parameters for MC_Halt command","title":"ST_XBox_Trigger_NC_Options"},{"location":"APIReference/NCAxisHelper.html#st_xbox_nc_halt_dynamics","text":"Name Type Default Value Description Deceleration LREAL 5000 Deceleration of the MC_Halt command Jerk LREAL 10000 Jerk of the MC_Halt command BufferMode MC_BufferMode BufferMode of the MC_Halt command Options ST_MoveOptions Options oif the MC_Halt command","title":"ST_XBox_NC_Halt_Dynamics"},{"location":"APIReference/Overview.html","text":"API Overview This API Doc is to serve as a reference for the TwinCAT XBox Controller Service and it's common PLC function blocks. Within this documentation you will find the Primary Functions Blocks and the Helper Function Blocks . Both are within the XBoxControllerUtilities library for PLC. Please visit the Getting Started section for the installation of the PLC library. Primary Functions Blocks These PLC function blocks are the core interface blocks for connecting an XBox controller to the PLC. They will enable you to connect multiple controllers, retrieve status bits, stream button values, read battery data, and set force feedback (rumble). Helper Function Blocks The helper function blocks are designed to make connection of an XBox controller to other TwinCAT items easier. They are mostly wrapper blocks with many different operations happening within. At the moment, there are two helper function block categories supported. NC Axis FBs These help with tasks such as attaching a two axis joystick to two independent NC Axis within TwinCAT. There are FBs to help with attaching a simple button pushes, analog triggers, and joysticks to drive an axis. XPlanar Mover FBs These help with controlling an XPlanar Mover. Instead of needing to write a bunch of setpoint code, the blocks are designed to expedite the connection process and allow you to start driving a mover quickly. Under The Hood How does the TwinCAT XBox Controller Service work? It's simple! The communication mechanism is TwinCAT's native ADS protocol. You may have seen other joystick or controller connection projects within the GitHub community. This project is special due to it being an ADS Server application. With the most recent update of ADS, there is support for ADS Servers based in .Net Core. Most of the commonly discovered projects within the community are using the ADS CLient connection. Why does Server vs. Client matter? With the Server, you simply need to start the service to begin hosting ADS data. When the PLC reaches out to the service on port 25733 , the service then reaches out to the XBox controller via XInput to retrieve the latest data. This creates a very easy to use mechanism within the TwinCAT environment. The future road-map of the project (after V1.0) is to create a Windows background service to allow the application to run in the background continuously upon startup. In contrast, the ADS Client applications that are commonly developed are a little more cumbersome to get running. Usually there is a C# application that has to be built and deployed. There might also be the need to modify some PLC variable names within the C# application to insure everything matches on the PLC side. Once the variables are connected within the PLC, they cannon't move and must sit where they were originally configured. Limitations At the moment the project is aimed for Windows IPC/CX support. In the future there are plans to also support TC/BSD, however it will require a different C++ driver within the application to connect to the controller. This is already under development, but it is not the primary focus. Due to XInput, there is a maximum controller count of 4 per TwinCAT XBox Controller Service. However, this will not stop you from connecting 4+ controllers. Due to the ADS servers nature, you can have the Controller Service running on many IPCs and connect to them remotely from a single PLC. This has been tested with up to 8 controllers, and it even works successfully with an ADS connection via AWS Cloud using ADS-over-MQTT.","title":"Overview"},{"location":"APIReference/Overview.html#api-overview","text":"This API Doc is to serve as a reference for the TwinCAT XBox Controller Service and it's common PLC function blocks. Within this documentation you will find the Primary Functions Blocks and the Helper Function Blocks . Both are within the XBoxControllerUtilities library for PLC. Please visit the Getting Started section for the installation of the PLC library.","title":"API Overview"},{"location":"APIReference/Overview.html#primary-functions-blocks","text":"These PLC function blocks are the core interface blocks for connecting an XBox controller to the PLC. They will enable you to connect multiple controllers, retrieve status bits, stream button values, read battery data, and set force feedback (rumble).","title":"Primary Functions Blocks"},{"location":"APIReference/Overview.html#helper-function-blocks","text":"The helper function blocks are designed to make connection of an XBox controller to other TwinCAT items easier. They are mostly wrapper blocks with many different operations happening within. At the moment, there are two helper function block categories supported.","title":"Helper Function Blocks"},{"location":"APIReference/Overview.html#nc-axis-fbs","text":"These help with tasks such as attaching a two axis joystick to two independent NC Axis within TwinCAT. There are FBs to help with attaching a simple button pushes, analog triggers, and joysticks to drive an axis.","title":"NC Axis FBs"},{"location":"APIReference/Overview.html#xplanar-mover-fbs","text":"These help with controlling an XPlanar Mover. Instead of needing to write a bunch of setpoint code, the blocks are designed to expedite the connection process and allow you to start driving a mover quickly.","title":"XPlanar Mover FBs"},{"location":"APIReference/Overview.html#under-the-hood","text":"How does the TwinCAT XBox Controller Service work? It's simple! The communication mechanism is TwinCAT's native ADS protocol. You may have seen other joystick or controller connection projects within the GitHub community. This project is special due to it being an ADS Server application. With the most recent update of ADS, there is support for ADS Servers based in .Net Core. Most of the commonly discovered projects within the community are using the ADS CLient connection. Why does Server vs. Client matter? With the Server, you simply need to start the service to begin hosting ADS data. When the PLC reaches out to the service on port 25733 , the service then reaches out to the XBox controller via XInput to retrieve the latest data. This creates a very easy to use mechanism within the TwinCAT environment. The future road-map of the project (after V1.0) is to create a Windows background service to allow the application to run in the background continuously upon startup. In contrast, the ADS Client applications that are commonly developed are a little more cumbersome to get running. Usually there is a C# application that has to be built and deployed. There might also be the need to modify some PLC variable names within the C# application to insure everything matches on the PLC side. Once the variables are connected within the PLC, they cannon't move and must sit where they were originally configured. Limitations At the moment the project is aimed for Windows IPC/CX support. In the future there are plans to also support TC/BSD, however it will require a different C++ driver within the application to connect to the controller. This is already under development, but it is not the primary focus. Due to XInput, there is a maximum controller count of 4 per TwinCAT XBox Controller Service. However, this will not stop you from connecting 4+ controllers. Due to the ADS servers nature, you can have the Controller Service running on many IPCs and connect to them remotely from a single PLC. This has been tested with up to 8 controllers, and it even works successfully with an ADS connection via AWS Cloud using ADS-over-MQTT.","title":"Under The Hood"},{"location":"APIReference/XBoxController.html","text":"FB_XBox_Controller This API Doc is to serve as a reference for the FB_XBox_Controller function block that is included with the XBoxControllerUtilities PLC library. Please visit the Getting Started section for the installation of the PLC library. Accessing a controller 1 2 3 4 VAR // Create a new controller XBoxController : FB_XBox_Controller ( NetID := '' , iControllerNumber := 1 ); END_VAR Parameter Type Description NetID T_AMSNETID This is the AMS NetID of the controller that is hosting the TwinCAT XBox Controller Service. For local, you can leave it as the default NetID := ' ' . iControllerNumber UINT(1..4) This is the controller number you would like to access. Windows allocated the controllers based on the order connected. These controllers are numbered 1 to 4. Cycle Method The cycle method is a must have for using the XBoxControllerUtilities library. This method polls the server to read/write data from the controller. Similar to other TwinCAT libraries like the XPlanar, it is necessary to call this method to retrieve/set I/O cyclically. In addition to this, you can stop calling the Cycle method to quit all ADS communication to the Controller Service. 1 2 // Update IO XBoxController . Cycle (); Accessing Inputs With the controller inputs the developer is given a choice to return the individual values, or a complex data structure. See the Button Inputs section below as a reference to each approach. Button Inputs Access Individual Boolean Values 1 2 3 IF XBoxController . P_Buttons . bA_Button THEN // Do Something END_IF Alternatively, you can retrieve a full structure of all buttons 1 2 // Returns ST_XBox_Controller_Buttons stControllerButtons := XBoxController . P_Buttons ; Joystick Inputs 1 2 // Returns ST_XBox_Controller_Joystick stLeftJoystick := XBoxController . P_Left_Joystick ; 1 2 // Returns ST_XBox_Controller_Joystick stRightJoystick := XBoxController . P_Right_Joystick ; 1 2 3 // Returns REAL fLeftJoystick_Y := XBoxController . P_Left_Joystick . fX ; fLeftJoystick_X := XBoxController . P_Left_Joystick . fY ; Trigger Inputs 1 2 // Returns REAL fLeftTrigger := XBoxController . P_Left_Trigger ; 1 2 // Returns REAL fRightTrigger := XBoxController . P_Right_Trigger ; Accessing Status Bits The status bits include auxiliary inputs such as the controllers connection status, battery type, and battery level. 1 2 // Returns ST_XBox_Controller_Status stControllerStatus := XBoxController . P_Status ; Connection Status 1 2 // Returns BOOL bConnected := XBoxController . P_Status . bConnected ; 1 2 // Returns BOOL bDisconnected := XBoxController . P_Status . bDisconnected ; Controller Number 1 2 // Returns INT iControllerNumber := XBoxController . P_Status . iControllerNumber ; Battery Type With the battery functions such as Level and Type, the status is not instant upon first call. The controller expects some buttons to be pressed or joysticks to be moved to update to the latest status. This is due to the way the Microsoft XInput DLL handles battery information updates. 1 2 // Returns E_XBox_Controller_Battery_Types eBatteryType := XBoxController . P_Status . Battery_Type ; Battery Level Battery level is only available if the battery type is a known type 1 2 // Returns E_XBox_Controller_Battery_Levels eBatteryLevel := XBoxController . P_Status . Battery_Level ; Setting Outputs Controller Rumble For the Force Feedback (Rumble) feature, you can continuously call the method and it will set it internally upon new value. Alternatively, you can call the set method and wait for feedback that the rumble values have actually been set. 1 2 3 4 5 6 7 8 // Sets rumble IF bSetRumble THEN XBoxController . SetRumble ( fLeftMotor := 50.0 , fRightMotor := 25.0 ); // Check if the rumble has been set IF XBoxController . P_SetRumble . Done THEN bSetRumble := FALSE ; END_IF END_IF Parameter Type Description fLeftMotor REAL Value of the left vibration motor speed (0..100%) fRightMotor REAL Value of the right vibration motor speed (0..100%) DUTs ST_XBox_Controller_Buttons Name Type Description DPad ST_XBox_Controller_DPad Directional Pad Structure bStart BOOL Status of start button bBack BOOL Status of back button bLeft_Thumbstick BOOL Status of Left Thumbstick bRight_Thumbstick BOOL Status of Right Thumbstick bLeft_Shoulder BOOL Status of Left Shoulder bRight_Shoulder BOOL Status of Right Shoulder bA_Button BOOL Status of A button bB_Button BOOL Status of B button bX_Button BOOL Status of X button bY_Button BOOL Status of Y button ST_XBox_Controller_DPad Name Type Description bUp BOOL Status of Up button on DPad bDown BOOL Status of Down button on DPad bLeft BOOL Status of Left button on DPad bRight BOOL Status of Right button on DPad ST_XBox_Controller_Joystick Name Type Description fX REAL Joystick's X Value (-100...100%) fY REAL Joystick's Y Value (-100...100%) ST_XBox_Controller_Status Name Type Description iControllerNumber BOOL Controller's ID bConnected BOOL Controller is connected to the PC bDisconnected BOOL Controller is disconnected from the PC Battery_Type E_XBox_Controller_Battery_Types Battery Type Battery_Level E_XBox_Controller_Battery_Levels Battery Level E_XBox_Controller_Battery_Types Name Type Value Description Disconnected BOOL 0 Battery is disconnected Wired BOOL 1 Controller is wired type Alkaline BOOL 2 Battery is alkaline NIMH BOOL 3 Battery is nickel-metal hydride Unknown BOOL 4 Battery is unknown E_XBox_Controller_Battery_Levels Name Type Value Description Empty BOOL 0 Battery is Empty or Unknown Low BOOL 1 Battery is at low level Medium BOOL 2 Battery is at medium level Full BOOL 3 Battery is at full level","title":"XBox Controller"},{"location":"APIReference/XBoxController.html#fb_xbox_controller","text":"This API Doc is to serve as a reference for the FB_XBox_Controller function block that is included with the XBoxControllerUtilities PLC library. Please visit the Getting Started section for the installation of the PLC library.","title":"FB_XBox_Controller"},{"location":"APIReference/XBoxController.html#accessing-a-controller","text":"1 2 3 4 VAR // Create a new controller XBoxController : FB_XBox_Controller ( NetID := '' , iControllerNumber := 1 ); END_VAR Parameter Type Description NetID T_AMSNETID This is the AMS NetID of the controller that is hosting the TwinCAT XBox Controller Service. For local, you can leave it as the default NetID := ' ' . iControllerNumber UINT(1..4) This is the controller number you would like to access. Windows allocated the controllers based on the order connected. These controllers are numbered 1 to 4.","title":"Accessing a controller"},{"location":"APIReference/XBoxController.html#cycle-method","text":"The cycle method is a must have for using the XBoxControllerUtilities library. This method polls the server to read/write data from the controller. Similar to other TwinCAT libraries like the XPlanar, it is necessary to call this method to retrieve/set I/O cyclically. In addition to this, you can stop calling the Cycle method to quit all ADS communication to the Controller Service. 1 2 // Update IO XBoxController . Cycle ();","title":"Cycle Method"},{"location":"APIReference/XBoxController.html#accessing-inputs","text":"With the controller inputs the developer is given a choice to return the individual values, or a complex data structure. See the Button Inputs section below as a reference to each approach.","title":"Accessing Inputs"},{"location":"APIReference/XBoxController.html#button-inputs","text":"Access Individual Boolean Values 1 2 3 IF XBoxController . P_Buttons . bA_Button THEN // Do Something END_IF Alternatively, you can retrieve a full structure of all buttons 1 2 // Returns ST_XBox_Controller_Buttons stControllerButtons := XBoxController . P_Buttons ;","title":"Button Inputs"},{"location":"APIReference/XBoxController.html#joystick-inputs","text":"1 2 // Returns ST_XBox_Controller_Joystick stLeftJoystick := XBoxController . P_Left_Joystick ; 1 2 // Returns ST_XBox_Controller_Joystick stRightJoystick := XBoxController . P_Right_Joystick ; 1 2 3 // Returns REAL fLeftJoystick_Y := XBoxController . P_Left_Joystick . fX ; fLeftJoystick_X := XBoxController . P_Left_Joystick . fY ;","title":"Joystick Inputs"},{"location":"APIReference/XBoxController.html#trigger-inputs","text":"1 2 // Returns REAL fLeftTrigger := XBoxController . P_Left_Trigger ; 1 2 // Returns REAL fRightTrigger := XBoxController . P_Right_Trigger ;","title":"Trigger Inputs"},{"location":"APIReference/XBoxController.html#accessing-status-bits","text":"The status bits include auxiliary inputs such as the controllers connection status, battery type, and battery level. 1 2 // Returns ST_XBox_Controller_Status stControllerStatus := XBoxController . P_Status ;","title":"Accessing Status Bits"},{"location":"APIReference/XBoxController.html#connection-status","text":"1 2 // Returns BOOL bConnected := XBoxController . P_Status . bConnected ; 1 2 // Returns BOOL bDisconnected := XBoxController . P_Status . bDisconnected ;","title":"Connection Status"},{"location":"APIReference/XBoxController.html#controller-number","text":"1 2 // Returns INT iControllerNumber := XBoxController . P_Status . iControllerNumber ;","title":"Controller Number"},{"location":"APIReference/XBoxController.html#battery-type","text":"With the battery functions such as Level and Type, the status is not instant upon first call. The controller expects some buttons to be pressed or joysticks to be moved to update to the latest status. This is due to the way the Microsoft XInput DLL handles battery information updates. 1 2 // Returns E_XBox_Controller_Battery_Types eBatteryType := XBoxController . P_Status . Battery_Type ;","title":"Battery Type"},{"location":"APIReference/XBoxController.html#battery-level","text":"Battery level is only available if the battery type is a known type 1 2 // Returns E_XBox_Controller_Battery_Levels eBatteryLevel := XBoxController . P_Status . Battery_Level ;","title":"Battery Level"},{"location":"APIReference/XBoxController.html#setting-outputs","text":"","title":"Setting Outputs"},{"location":"APIReference/XBoxController.html#controller-rumble","text":"For the Force Feedback (Rumble) feature, you can continuously call the method and it will set it internally upon new value. Alternatively, you can call the set method and wait for feedback that the rumble values have actually been set. 1 2 3 4 5 6 7 8 // Sets rumble IF bSetRumble THEN XBoxController . SetRumble ( fLeftMotor := 50.0 , fRightMotor := 25.0 ); // Check if the rumble has been set IF XBoxController . P_SetRumble . Done THEN bSetRumble := FALSE ; END_IF END_IF Parameter Type Description fLeftMotor REAL Value of the left vibration motor speed (0..100%) fRightMotor REAL Value of the right vibration motor speed (0..100%)","title":"Controller Rumble"},{"location":"APIReference/XBoxController.html#duts","text":"","title":"DUTs"},{"location":"APIReference/XBoxController.html#st_xbox_controller_buttons","text":"Name Type Description DPad ST_XBox_Controller_DPad Directional Pad Structure bStart BOOL Status of start button bBack BOOL Status of back button bLeft_Thumbstick BOOL Status of Left Thumbstick bRight_Thumbstick BOOL Status of Right Thumbstick bLeft_Shoulder BOOL Status of Left Shoulder bRight_Shoulder BOOL Status of Right Shoulder bA_Button BOOL Status of A button bB_Button BOOL Status of B button bX_Button BOOL Status of X button bY_Button BOOL Status of Y button","title":"ST_XBox_Controller_Buttons"},{"location":"APIReference/XBoxController.html#st_xbox_controller_dpad","text":"Name Type Description bUp BOOL Status of Up button on DPad bDown BOOL Status of Down button on DPad bLeft BOOL Status of Left button on DPad bRight BOOL Status of Right button on DPad","title":"ST_XBox_Controller_DPad"},{"location":"APIReference/XBoxController.html#st_xbox_controller_joystick","text":"Name Type Description fX REAL Joystick's X Value (-100...100%) fY REAL Joystick's Y Value (-100...100%)","title":"ST_XBox_Controller_Joystick"},{"location":"APIReference/XBoxController.html#st_xbox_controller_status","text":"Name Type Description iControllerNumber BOOL Controller's ID bConnected BOOL Controller is connected to the PC bDisconnected BOOL Controller is disconnected from the PC Battery_Type E_XBox_Controller_Battery_Types Battery Type Battery_Level E_XBox_Controller_Battery_Levels Battery Level","title":"ST_XBox_Controller_Status"},{"location":"APIReference/XBoxController.html#e_xbox_controller_battery_types","text":"Name Type Value Description Disconnected BOOL 0 Battery is disconnected Wired BOOL 1 Controller is wired type Alkaline BOOL 2 Battery is alkaline NIMH BOOL 3 Battery is nickel-metal hydride Unknown BOOL 4 Battery is unknown","title":"E_XBox_Controller_Battery_Types"},{"location":"APIReference/XBoxController.html#e_xbox_controller_battery_levels","text":"Name Type Value Description Empty BOOL 0 Battery is Empty or Unknown Low BOOL 1 Battery is at low level Medium BOOL 2 Battery is at medium level Full BOOL 3 Battery is at full level","title":"E_XBox_Controller_Battery_Levels"},{"location":"APIReference/XPlanarHelper.html","text":"Coming Soon","title":"XPlanar Helpers"},{"location":"APIReference/XPlanarHelper.html#coming-soon","text":"","title":"Coming Soon"},{"location":"GettingStarted/FirstProgram.html","text":"Hello XBox Controller Now you are ready to start using the TwinCAT XBox Controller Service! Make sure that the XBox controller is plugged in, PLC library installed, and the service is running.To create an XBox controller connection inside the PLC, you'll instantiate a new controller like this. 1 2 3 4 5 6 7 VAR // Create a new controller XBoxController : FB_XBox_Controller ( NetID := '' , iControllerNumber := 1 ); // Status of controller connection bIsConnected : BOOL ; END_VAR 1 2 3 4 5 // Update all the controller I/O XBoxController . Cycle (); // Check if controller is connected bIsConnected := XBoxController . P_Status . bConnected ;; The NetID is the PC running the service application. This can be remote and supply an ADS address, or it can be left as '' for local. The iControllerNumber is the controller ID you would like to access. Each time a controller is connected to Windows, it is given a number. The service currently supports up to 4 controllers per system due to Windows XInput, but you can also have multiple PCs hosting data to a single PLC. MANDATORY!!! You must call the Cycle method to update the inputs and outputs of the controller. Without this, you will see no data coming across. This Cycle method works similar to the XPlanar Standard library as it updates all the internals.","title":"First Program"},{"location":"GettingStarted/FirstProgram.html#hello-xbox-controller","text":"Now you are ready to start using the TwinCAT XBox Controller Service! Make sure that the XBox controller is plugged in, PLC library installed, and the service is running.To create an XBox controller connection inside the PLC, you'll instantiate a new controller like this. 1 2 3 4 5 6 7 VAR // Create a new controller XBoxController : FB_XBox_Controller ( NetID := '' , iControllerNumber := 1 ); // Status of controller connection bIsConnected : BOOL ; END_VAR 1 2 3 4 5 // Update all the controller I/O XBoxController . Cycle (); // Check if controller is connected bIsConnected := XBoxController . P_Status . bConnected ;; The NetID is the PC running the service application. This can be remote and supply an ADS address, or it can be left as '' for local. The iControllerNumber is the controller ID you would like to access. Each time a controller is connected to Windows, it is given a number. The service currently supports up to 4 controllers per system due to Windows XInput, but you can also have multiple PCs hosting data to a single PLC. MANDATORY!!! You must call the Cycle method to update the inputs and outputs of the controller. Without this, you will see no data coming across. This Cycle method works similar to the XPlanar Standard library as it updates all the internals.","title":"Hello XBox Controller"},{"location":"GettingStarted/Installation.html","text":"Installing The Service To make sure you have the latest version, visit the releases page. There will be a zip folder that includes the latest MSI installer for Windows 10. Once the program is installed, you can start the service by launching it from the User Programs menu. A successfully running service should look like this. You can then minimize the application to have it running in the background to host application data. Installing The PLC Library After the service install process, there will be a PLC library placed at the location C:\\Program Files\\Beckhoff Community\\TwinCAT XBox Controller Service\\PLC Library . You will need to import this into the TwinCAT library repository before being able to use the functions. To do this, right-click the Resources folder inside a PLC project and use the install button.","title":"Installation"},{"location":"GettingStarted/Installation.html#installing-the-service","text":"To make sure you have the latest version, visit the releases page. There will be a zip folder that includes the latest MSI installer for Windows 10. Once the program is installed, you can start the service by launching it from the User Programs menu. A successfully running service should look like this. You can then minimize the application to have it running in the background to host application data.","title":"Installing The Service"},{"location":"GettingStarted/Installation.html#installing-the-plc-library","text":"After the service install process, there will be a PLC library placed at the location C:\\Program Files\\Beckhoff Community\\TwinCAT XBox Controller Service\\PLC Library . You will need to import this into the TwinCAT library repository before being able to use the functions. To do this, right-click the Resources folder inside a PLC project and use the install button.","title":"Installing The PLC Library"},{"location":"GettingStarted/Introduction.html","text":"Introduction This site serves as reference documentation for the TwinCAT XBox Controller Service GitHub Project. Disclaimer This project is for use at your own risk when attached to all physical machinery; such as motors, robots, etc. Always use proper safety precautions when controlling industrial machinery. See the included Zero-clause BSD license in the corresponding GitHub repository. Additional Resources TwinCAT XBox Controller Service Github","title":"Introduction"},{"location":"GettingStarted/Introduction.html#introduction","text":"This site serves as reference documentation for the TwinCAT XBox Controller Service GitHub Project.","title":"Introduction"},{"location":"GettingStarted/Introduction.html#disclaimer","text":"This project is for use at your own risk when attached to all physical machinery; such as motors, robots, etc. Always use proper safety precautions when controlling industrial machinery. See the included Zero-clause BSD license in the corresponding GitHub repository.","title":"Disclaimer"},{"location":"GettingStarted/Introduction.html#additional-resources","text":"TwinCAT XBox Controller Service Github","title":"Additional Resources"},{"location":"GettingStarted/SystemRequirements.html","text":"Getting Started PC/IPC/CX Requirements Windows 10 or higher Microsoft .Net 6.0.7 Runtime (Installer will auto-download if connected to internet) TwinCAT XAR XBox Controller Requirements The TwinCAT XBox Controller Service uses a Microsoft XInput based DLL to access the XBox controller. This DLL is light weight and C++ based, but it there are specific controllers that it supports. Controllers Supported: Xbox Elite Controller Series Xbox Series X|S controllers Xbox One controllers Xbox 360 controllers Wireless or Wired Connectivity For wired connectivity the configuration is straightforward. As of initial testing, the controllers listed above all function with a simple USB-C to USB-A cable between the IPC and XBox controller. For wireless connectivity, it is recommended to use the Microsoft official XBox USB dongle. This dongle allows connection to 4 controllers simultaneously. To use the Microsoft dongle, you will need to install the driver manually or have the system updates enabled. Since Beckhoff CXs/IPCs have updates disabled, there is a provided driver in the MSI installer of the TwinCAT XBox Controller Service project. Follow these steps to install the driver. Install the project MSI Locate the CAB file at C:\\Program Files\\Beckhoff Community\\TwinCAT XBox Controller Service\\Offline Installers\\Wireless Drivers Extract the CAB file (using 7-zip or other tool) Right-click -> Install on the driver Plugin dongle NOTE You can attempt to use an off the shelf USB bluetooth dongle to connect the controller wirelessly, however results in testing have been mixed. Due to the way Microsoft handles the connection to the USB dongle, it's best to use their officially supported dongle.","title":"System Requirements"},{"location":"GettingStarted/SystemRequirements.html#getting-started","text":"","title":"Getting Started"},{"location":"GettingStarted/SystemRequirements.html#pcipccx-requirements","text":"Windows 10 or higher Microsoft .Net 6.0.7 Runtime (Installer will auto-download if connected to internet) TwinCAT XAR","title":"PC/IPC/CX Requirements"},{"location":"GettingStarted/SystemRequirements.html#xbox-controller-requirements","text":"The TwinCAT XBox Controller Service uses a Microsoft XInput based DLL to access the XBox controller. This DLL is light weight and C++ based, but it there are specific controllers that it supports. Controllers Supported: Xbox Elite Controller Series Xbox Series X|S controllers Xbox One controllers Xbox 360 controllers","title":"XBox Controller Requirements"},{"location":"GettingStarted/SystemRequirements.html#wireless-or-wired-connectivity","text":"For wired connectivity the configuration is straightforward. As of initial testing, the controllers listed above all function with a simple USB-C to USB-A cable between the IPC and XBox controller. For wireless connectivity, it is recommended to use the Microsoft official XBox USB dongle. This dongle allows connection to 4 controllers simultaneously. To use the Microsoft dongle, you will need to install the driver manually or have the system updates enabled. Since Beckhoff CXs/IPCs have updates disabled, there is a provided driver in the MSI installer of the TwinCAT XBox Controller Service project. Follow these steps to install the driver. Install the project MSI Locate the CAB file at C:\\Program Files\\Beckhoff Community\\TwinCAT XBox Controller Service\\Offline Installers\\Wireless Drivers Extract the CAB file (using 7-zip or other tool) Right-click -> Install on the driver Plugin dongle NOTE You can attempt to use an off the shelf USB bluetooth dongle to connect the controller wirelessly, however results in testing have been mixed. Due to the way Microsoft handles the connection to the USB dongle, it's best to use their officially supported dongle.","title":"Wireless or Wired Connectivity"}]}